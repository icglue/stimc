#
# Uncrustify Configuration File
#

# Alignment
# ---------

## Alignment

# Align on tabstop
align_on_tabstop                        = false         # boolean (false/true)

# Align with tabs
align_with_tabs                         = false         # boolean (false/true)

## Alignment Span

# Alignment span for #define bodies
align_pp_define_span                    = 8             # number

# Alignment span for assignments
align_assign_span                       = 1             # number

# Alignment span for equals in enums
align_enum_equ_span                     = 1             # number

# Alignment span for struct initializer values
#align_struct_init_span                  = 0             # number

# Alignment span for trailing comments
align_right_cmt_span                    = 8             # number

# The span for aligning variable definitions (0=don't align)
align_var_def_span                      = 1             # unsigned number

# The span for aligning struct/union (0=don't align)
align_var_struct_span                   = 1        # unsigned number

#  How to align the star in variable definitions.
align_var_def_star_style                = 2
#   0=Part of the type     'void *   foo;'
#   1=Part of the variable 'void     *foo;'
#   2=Dangling             'void    *foo;'

# Whether to align any attribute after the variable name.
align_var_def_attribute         = false    # false/true

# The span for aligning function prototypes (0=don't align).
align_func_proto_span           = 1        # unsigned number

## Gap

# Minimum gap for trailing comment
align_right_cmt_gap                     = 8             # number

# Blank Lines
# -----------

## Newline Count After

# Newline count after variable definition block
nl_func_var_def_blk                     = 1             # number

# Whether to collapse empty blocks between '{' and '}'.
nl_collapse_empty_body                  = true         # false/true

# Don't split one-line if/else statements - 'if(a) b++;'.
nl_if_leave_one_liners          = true    # false/true

# Don't split one-line while statements - 'while(a) b++;'.
nl_while_leave_one_liners       = true # false/true

# Add or remove space inside '{}'.
sp_inside_braces_empty                  = remove       # ignore/add/remove/force

# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'.
#nl_assign_leave_one_liners              = true    # false/true

# Don't split one-line braced statements inside a class xx { } body.
#nl_class_leave_one_liners               = true    # false/true

# Don't split one-line function definitions - 'int foo() { return 0; }'.
nl_func_leave_one_liners                = true    # false/true

# Add or remove newline at the end of the file.
nl_end_of_file                          = add     # ignore/add/remove/force

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force').
nl_end_of_file_min                      = 2       # unsigned number

# Code-Modifying
# --------------

## Braces

# Braces around statments that span N newlines
mod_full_brace_nl                       = 3             # number

# Braces on single-line do statement
#mod_full_brace_do                       = remove        # string (add/force/ignore/remove)

# Braces on single-line else statement
#mod_full_brace_if                       = remove        # string (add/force/ignore/remove)

# Braces on single-line for statement
#mod_full_brace_for                      = remove        # string (add/force/ignore/remove)

# Braces on single-line while statement
#mod_full_brace_while                    = remove        # string (add/force/ignore/remove)

## Comments

# Add comment after ifdef/endif statement of size
#mod_add_long_ifdef_endif_comment        = 20            # number

## Parentheses

# Remove unnecessary parentheses on return statement
mod_paren_on_return                     = ignore        # string (add/force/ignore/remove)

# Comments
# --------

## Other

# Stars on multi-line comments
cmt_star_cont                           = false         # boolean (false/true)

# For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of
# the comment are the same length. Default=True.
cmt_multi_check_last            = false     # false/true

# General
# -------

## Other

# Output tab size
output_tab_size                         = 4             # number

# Indentation
# -----------

## Indentation Size

# Indentation column size
indent_columns                          = 4             # number

# Indentation size between case and switch
indent_switch_case                      = 4             # number

## Other

# Align continued statements at equals
indent_align_assign                     = false         # boolean (false/true)

# Indent goto labels
indent_label                            = 2             # number

# Indent with tabs
indent_with_tabs                        = 0             # number

# Whether the 'namespace' body is indented.
indent_namespace                        = true          # false/true

# Whether the 'extern "C"' body is indented.
indent_extern                           = false         # false/true

# Whether the 'class' body is indented.
indent_class                            = true          # false/true

# Whether to indent the stuff after a leading base class colon.
#indent_class_colon              = true    # false/true

# Indent based on a class colon instead of the stuff after the colon.
# Requires indent_class_colon=True. Default=False.
#indent_class_on_colon           = true    # false/true

# How to indent goto labels
#   >0: absolute column where 1 is the leftmost column
#  <=0: subtract from brace indent
# Default=1
indent_label                            = 1             # number

# Same as indent_label, but for access specifiers that are followed by a colon. Default=1
indent_access_spec                      = 0             # number

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'.
indent_access_spec_body                 = true          # false/true

# Newlines
# --------

## Newline Between

# Newline between close brace and else
nl_brace_else                           = remove        # string (add/force/ignore/remove)

# Newline between close brace and while
nl_brace_while                          = remove        # string (add/force/ignore/remove)

# Newline between do and open brace
nl_do_brace                             = remove        # string (add/force/ignore/remove)

# Newline between else and open brace
nl_else_brace                           = remove        # string (add/force/ignore/remove)

# Newline between enum and open brace
nl_enum_brace                           = remove        # string (add/force/ignore/remove)

# Newline between for and open brace
nl_for_brace                            = remove        # string (add/force/ignore/remove)

# Newline between function call and open brace
nl_fcall_brace                          = ignore        # string (add/force/ignore/remove)

# Newline between function signature and open brace
nl_fdef_brace                           = add           # string (add/force/ignore/remove)

# Newline between if and open brace
nl_if_brace                             = remove        # string (add/force/ignore/remove)

# Newline between struct and open brace
nl_struct_brace                         = remove        # string (add/force/ignore/remove)

# Newline between switch and open brace
nl_switch_brace                         = remove        # string (add/force/ignore/remove)

# Newline between union and open brace
nl_union_brace                          = remove        # string (add/force/ignore/remove)

# Newline between while and open brace
nl_while_brace                          = remove        # string (add/force/ignore/remove)

# Newline between namespace and {.
nl_namespace_brace                      = add           # ignore/add/remove/force
# Newline between namespace and {.
nl_namespace_brace                      = ignore        # ignore/add/remove/force

# Spacing
# -------

## Space After

# Space after C++ comment opening
sp_cmt_cpp_start                        = add           # string (add/force/ignore/remove)

# Space after ObjC block caret
sp_after_oc_block_caret                 = remove        # string (add/force/ignore/remove)

# Space after ObjC colon
sp_after_oc_colon                       = remove        # string (add/force/ignore/remove)

# Space after ObjC message colon
sp_after_send_oc_colon                  = remove        # string (add/force/ignore/remove)

# Space after ObjC return type
sp_after_oc_return_type                 = force         # string (add/force/ignore/remove)

# Space after ObjC scope
sp_after_oc_scope                       = force         # string (add/force/ignore/remove)

# Space after ObjC type
sp_after_oc_type                        = remove        # string (add/force/ignore/remove)

# Space after cast
sp_after_cast                           = remove        # string (add/force/ignore/remove)

# Space after class colon
sp_after_class_colon                    = force         # string (add/force/ignore/remove)

# Space after comma
sp_after_comma                          = add           # string (add/force/ignore/remove)

# Space after condition close parenthesis
sp_after_sparen                         = force         # string (add/force/ignore/remove)

# Space after pointer star
sp_after_ptr_star                       = remove        # string (add/force/ignore/remove)

# Space after pointer star followed by function
sp_after_ptr_star_func                  = remove        # string (add/force/ignore/remove)

# Add or remove space after pointer star '*', if followed by a qualifier.
sp_after_ptr_star_qualifier             = remove        # string (add/force/ignore/remove)

## Space Around

# Space around arithmetic operators
sp_arith                                = add           # string (add/force/ignore/remove)

# Space around assignment operator
sp_assign                               = add           # string (add/force/ignore/remove)

# Space around boolean operators
sp_bool                                 = add           # string (add/force/ignore/remove)

# Space around compare operators
sp_compare                              = add           # string (add/force/ignore/remove)

# Space around ternary condition colon
sp_cond_colon                           = force         # string (add/force/ignore/remove)

# Space around ternary condition question mark
#sp_cond_question                        = force         # string (add/force/ignore/remove)

## Space Before

# Space before ObjC block caret
sp_before_oc_block_caret                = force         # string (add/force/ignore/remove)

# Space before ObjC colon
sp_before_oc_colon                      = remove        # string (add/force/ignore/remove)

# Space before ObjC message colon
sp_before_send_oc_colon                 = remove        # string (add/force/ignore/remove)

# Space before case colon
sp_before_case_colon                    = remove        # string (add/force/ignore/remove)

# Space before class colon
sp_before_class_colon                   = force         # string (add/force/ignore/remove)

# Space before if/for/switch/while open parenthesis
sp_before_sparen                        = force         # string (add/force/ignore/remove)

# Space before pointer star
sp_before_ptr_star                      = force         # string (add/force/ignore/remove)

# Space before pointer star followed by function
sp_before_ptr_star_func                 = force         # string (add/force/ignore/remove)

# Space before unnamed pointer star
sp_before_unnamed_ptr_star              = add           # string (add/force/ignore/remove)

## Space Between

# Space between @selector and open parenthesis
sp_after_oc_at_sel                      = remove        # string (add/force/ignore/remove)

# Space between close brace and else
sp_brace_else                           = force         # string (add/force/ignore/remove)

# Space between close parenthesis and open brace
sp_paren_brace                          = force         # string (add/force/ignore/remove)

# Space between else and open brace
sp_else_brace                           = force         # string (add/force/ignore/remove)

# Space between function name and open parenthesis
sp_func_call_paren                      = add           # string (add/force/ignore/remove)

# Space between function name and open parenthesis in declaration
sp_func_proto_paren                     = add           # string (add/force/ignore/remove)

# Space between function name and open parenthesis in function definition
sp_func_def_paren                       = add           # string (add/force/ignore/remove)

# Space between pointer stars
sp_between_ptr_star                     = remove        # string (add/force/ignore/remove)

# Space between return and open parenthesis
sp_return_paren                         = add           # string (add/force/ignore/remove)

# Space between sizeof and open parenthesis
sp_sizeof_paren                         = add           # string (add/force/ignore/remove)

## Space Inside

# Space inside braces
sp_inside_braces                        = remove        # string (add/force/ignore/remove)

# Space inside enum braces
sp_inside_braces_enum                   = add           # string (add/force/ignore/remove)

# Space inside function parentheses
sp_inside_fparen                        = remove        # string (add/force/ignore/remove)

# Space inside struct/union braces
sp_inside_braces_struct                 = add           # string (add/force/ignore/remove)
