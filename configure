#!/bin/sh

# Variables
PROJDIR="$(dirname "$(readlink -e "$0")")"
BUILDDIR="${PROJDIR}/build"
MAKEFILE="${PROJDIR}/Makefile"
CONFIGFLAGS=""
CLEAN=0

die() {
    echo "$1"
    exit 1
}
diehelp() {
    echo "$1"
    printhelp
    exit 1
}

printhelp() {
    cat << EOF
Usage: $0 [OPTION]...

With arguments from
--clean                                 delete files from previous build if existing
--incremental                           update files in case of existing previous build

--prefix                    <PATH>      installation prefix

--with-docs                             build and install documentation
--without-docs                          omit documentation
--with-addons                           build and install addons
--without-addons                        omit addons

--simulator                 <SIMULATOR> set simulator for vpi headers and test, one of:
                                        auto, icarus, cvc, ncsim, xcelium (default=auto)
--thread-implementation     <IMPL>      set thread implementation, one of:
                                        libco-local, libco, pcl, boost1, boost2 (default=libco-local)

--valvector-max-stack       <N>         integer for maximum vpi on-stack vecval, 0 for default implementation
--thread-stack-size-default <SIZE>      default stack size for coroutines, 0 for default implementation
--disable-cleanup                       disable end-of-simulation resource cleanup
--enable-cleanup                        enable end-of-simulation resource cleanup (default)

--disable-strict-warning                set compiler warning level to normal (default)
--enable-strict-warning                 set compiler warning level to strict

-h, --help                              print this help text
EOF
}

parse_options() {
    local option
    local value
    local optshift

    while [ $# -ge 1 ] ; do
        option="$1"
        value="$2"
        optshift=2

        if echo "${option}" | grep '=' ; then
            value="$(echo "${option}" | sed -e 's/\(.*\)=\(.*\)/\2/')"
            option="$(echo "${option}" | sed -e 's/\(.*\)=\(.*\)/\1/')"
            optshift=1
        fi

        case "${option}" in
            "--clean")
                CLEAN=1
                optshift=1
                ;;
            "--incremental")
                CLEAN=0
                optshift=1
                ;;

            "--prefix")
                CONFIGFLAGS="${CONFIGFLAGS} -DCMAKE_INSTALL_PREFIX:PATH=${value}"
                ;;

            "--with-docs")
                CONFIGFLAGS="${CONFIGFLAGS} -DBUILD_DOC=1"
                optshift=1
                ;;
            "--without-docs")
                CONFIGFLAGS="${CONFIGFLAGS} -DBUILD_DOC=0"
                optshift=1
                ;;
            "--with-addons")
                CONFIGFLAGS="${CONFIGFLAGS} -DADDONS=1"
                optshift=1
                ;;
            "--without-addons")
                CONFIGFLAGS="${CONFIGFLAGS} -DADDONS=0"
                optshift=1
                ;;

            "--simulator")
                CONFIGFLAGS="${CONFIGFLAGS} -DSIMULATOR=${value}"
                ;;
            "--thread-implementation")
                CONFIGFLAGS="${CONFIGFLAGS} -DTHREAD_IMPL=${value}"
                ;;

            "--valvector-max-stack")
                CONFIGFLAGS="${CONFIGFLAGS} -DVALVECTOR_MAX_STATIC=${value}"
                ;;
            "--thread-stack-size-default")
                CONFIGFLAGS="${CONFIGFLAGS} -DTHREAD_STACK_SIZE_DEFAULT=${value}"
                ;;
            "--disable-cleanup")
                CONFIGFLAGS="${CONFIGFLAGS} -DDISABLE_CLEANUP=1"
                optshift=1
                ;;
            "--enable-cleanup")
                CONFIGFLAGS="${CONFIGFLAGS} -DDISABLE_CLEANUP=0"
                optshift=1
                ;;

            "--disable-strict-warning")
                CONFIGFLAGS="${CONFIGFLAGS} -DWARN_LEVEL=strict"
                optshift=1
                ;;
            "--enable-strict-warning")
                CONFIGFLAGS="${CONFIGFLAGS} -DWARN_LEVEL=default=0"
                optshift=1
                ;;

            "-h"|"--help"|"-?"|"-help")
                printhelp
                exit 0
                ;;

            *)
                diehelp "invalid option ${option}"
                ;;
        esac

        [ $# -ge ${optshift} ] && shift ${optshift} || diehelp "missing argument for ${option}"
    done
}

clean_build() {
    [ -d "${BUILDDIR}" ] && rm -rf "${BUILDDIR}"
    [ -f "${MAKEFILE}" ] && rm -f  "${MAKEFILE}"
}

prepare_build() {
    mkdir -p "${BUILDDIR}"
    cd "${BUILDDIR}" || die "could not enter ${BUILDDIR}"
    cmake ${CONFIGFLAGS} ..
}

gen_makefile() {
    cat > "${MAKEFILE}" << EOF
# adapted from https://gist.github.com/doitian/4978329

TARGET_BUILDDIR := build
TARGET_MAKEFILE := \$(TARGET_BUILDDIR)/Makefile
TARGET_TEST     := test
TARGET_CLEAN    := mrproper
NCPUS           := \$(shell nproc)

# List targets defined in this file
TARGETS_SELF := \\
    \$(TARGET_BUILDDIR) \\
    \$(TARGET_MAKEFILE) \\
    \$(TARGET_TEST) \\
    \$(TARGET_CLEAN)

# Exclude targets defined in this file
TARGETS_OTHER := \$(filter-out \$(TARGETS_SELF), \$(MAKECMDGOALS))

# Call all targets using 'Makefile' in build directory in one 'make' command. It
# can depend on targets defined in this file, e.g., depending on a target to
# create the Makefile.
#
# If no targets are specified, use the dummy 'all' target
\$(or \$(lastword \$(TARGETS_OTHER)),all): \$(TARGET_MAKEFILE)
	@\$(MAKE) --no-print-directory -C \$(TARGET_BUILDDIR) \$(TARGETS_OTHER)
.PHONY: \$(TARGETS_OTHER) all

# Do nothing for all targets but last. Also quiet the message "Noting to be done on xxx"
\$(filter-out \$(lastword \$(TARGETS_OTHER)), \$(TARGETS_OTHER)):
	@cd .

\$(TARGET_BUILDDIR):
	mkdir -p \$(TARGET_BUILDDIR)
\$(TARGET_MAKEFILE): | \$(TARGET_BUILDDIR)
	cd \$(TARGET_BUILDDIR) && cmake ..
\$(TARGET_TEST): all
	cd \$(TARGET_BUILDDIR) && ctest -j\$(NCPUS)
\$(TARGET_CLEAN):
	rm -rf \$(TARGET_BUILDDIR)
	rm -f  Makefile

.PHONY: \$(TARGET_TEST)
EOF
}

parse_options "$@"

[ "${CLEAN}" -eq 1 ] && clean_build

prepare_build && gen_makefile
